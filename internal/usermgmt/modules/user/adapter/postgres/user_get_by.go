// Code generated by "hexagen User ."; DO NOT EDIT.

package postgres

import (
	"backend/internal/usermgmt/modules/user/core/entity"
	"backend/internal/usermgmt/pkg/database"
	"backend/internal/usermgmt/pkg/field"
	"context"
	"fmt"
	"strings"
)

func (userRepo *UserRepo) GetByUserID(ctx context.Context, db database.QueryExecer, userID field.String) (entity.User, error) {
	user := &User{}
	fields := database.GetFieldNames(user)

	stmt := `SELECT %s FROM %s WHERE %s = $1`
	stmt = fmt.Sprintf(stmt, strings.Join(fields, ","), UserTableUserIDColumn, user.TableName())

	row := db.QueryRow(ctx, stmt, userID)

	if err := row.Scan(database.GetScanFields(user, fields)...); err != nil {
		return nil, err
	}

	return user, nil
}

func (userRepo *UserRepo) GetByEmail(ctx context.Context, db database.QueryExecer, email field.String) (entity.User, error) {
	user := &User{}
	fields := database.GetFieldNames(user)

	stmt := `SELECT %s FROM %s WHERE %s = $1`
	stmt = fmt.Sprintf(stmt, strings.Join(fields, ","), UserTableEmailColumn, user.TableName())

	row := db.QueryRow(ctx, stmt, email)

	if err := row.Scan(database.GetScanFields(user, fields)...); err != nil {
		return nil, err
	}

	return user, nil
}

func (userRepo *UserRepo) GetByOrganizationID(ctx context.Context, db database.QueryExecer, organizationID field.String) (entity.User, error) {
	user := &User{}
	fields := database.GetFieldNames(user)

	stmt := `SELECT %s FROM %s WHERE %s = $1`
	stmt = fmt.Sprintf(stmt, strings.Join(fields, ","), UserTableOrganizationIDColumn, user.TableName())

	row := db.QueryRow(ctx, stmt, organizationID)

	if err := row.Scan(database.GetScanFields(user, fields)...); err != nil {
		return nil, err
	}

	return user, nil
}
