// Code generated by "hexagen User ."; DO NOT EDIT.

package entity

import (
	"backend/internal/usermgmt/pkg/field"
	"github.com/pkg/errors"
)

// This statement will fail to compile if *NullUser ever stops matching the interface.
var _ User = (*NullUser)(nil)

type NullUser struct{}

func (user NullUser) UserID() field.String {
	return field.NewNullString()
}
func (user NullUser) Email() field.String {
	return field.NewNullString()
}
func (user NullUser) OrganizationID() field.String {
	return field.NewNullString()
}

// ComapareUserValues compare values of two entities
func ComapareUserValues(user1 User, user2 User) error {
	switch {
	case user1.UserID().String() != user2.UserID().String():
		return errors.New("UserID is not equal")
	case user1.Email().String() != user2.Email().String():
		return errors.New("Email is not equal")
	case user1.OrganizationID().String() != user2.OrganizationID().String():
		return errors.New("OrganizationID is not equal")
	}
	return nil
}

// Users represents for a slice of User
type Users []User

func (users Users) UserIDs() []field.String {
	userIDs := make([]field.String, 0, len(users))
	for _, user := range users {
		userIDs = append(userIDs, user.UserID())
	}
	return userIDs
}

func (users Users) Emails() []field.String {
	emails := make([]field.String, 0, len(users))
	for _, user := range users {
		emails = append(emails, user.Email())
	}
	return emails
}

func (users Users) OrganizationIDs() []field.String {
	organizationIDs := make([]field.String, 0, len(users))
	for _, user := range users {
		organizationIDs = append(organizationIDs, user.OrganizationID())
	}
	return organizationIDs
}
